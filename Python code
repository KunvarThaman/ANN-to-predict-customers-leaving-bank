#Data Preprocessing


#Importing the libraries

import numpy as np
import matplotlib.pyplot as pyplt
import pandas as pd

#Importing datasets

dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[: , 3:13].values
Y = dataset.iloc[:, 13].values

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X_1 = LabelEncoder()
X[:, 1] = labelencoder_X_1.fit_transform(X[:, 1])
labelencoder_X_2 = LabelEncoder()
X[:, 2] = labelencoder_X_2.fit_transform(X[:, 2])
onehotencoder = OneHotEncoder(categorical_features = [1])
X = onehotencoder.fit_transform(X).toarray()
X = X[:, 1:]

#Splitting the dataset into test set and training set

from sklearn.cross_validation import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.20, random_state = 0)


#Feature Scaling

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

#Importing Keras library and packages
import keras
from keras.models import Sequential
from keras.layers import Dense

#Initializing the ANN
classifier = Sequential()

#Adding the input and the first hidden layer
classifier.add(Dense(output_dim = 6, init = 'uniform' , activation = 'relu', input_dim = 11))
classifier.add(Dense(output_dim = 6, init = 'uniform' , activation = 'relu'))
#Add as many layers as you want. Basic - Input features + output features average. For adv, try different ones.

#Adding the final output layer
classifier.add(Dense(output_dim = 1, init = 'uniform' , activation = 'sigmoid'))

#Compiling the ANN
#adam is a type of stochastic gradient descent.
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy' , metrics = ['accuracy'])

#Fitting the ANN to the training set

classifier.fit(X_train, Y_train, batch_size = 10, epochs = 100 )


#Predicting the test set results

Y_pred = classifier.predict(X_test)

#Converting the probabilities to 0 and 1.
Y_pred = (Y_pred > 0.5)

#Prediction for a single customer
new_prediction = classifier.predict(sc_X.transform(np.array([[0, 0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]])))
new_prediction = (new_prediction > 0.5)

#Making the confusion matrix

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test, Y_pred)

#Evaluating the performance and improving the ANN.

#Implementing K fold cross validation
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from keras.models import Sequential
from keras.layers import Dense
def build_classifier():
    classifier = Sequential()
    classifier.add(Dense(output_dim = 6, init = 'uniform' , activation = 'relu', input_dim = 11))
    classifier.add(Dense(output_dim = 6, init = 'uniform' , activation = 'relu'))
    classifier.add(Dense(output_dim = 1, init = 'uniform' , activation = 'sigmoid'))
    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy' , metrics = ['accuracy'])
    return classifier
classifier = KerasClassifier(build_fn =build_classifier,batch_size = 10, epochs = 100)
accuracies = cross_val_score(estimator = classifier,X = X_train, y = Y_train, cv = 10, n_jobs = -1)

